// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model Category {
  id     String  @id @default(uuid())
  title  String
  events Event[] @relation("EventCategories")
}

model Format {
  id         String  @id @default(uuid())
  formatName String
  link       String?
  address    String?
  events     Event[] @relation("EventFormat")
}

model Event {
  id           String     @id @default(uuid())
  createdBy    User       @relation("CreatedEvents", fields: [createdIdBy], references: [id])
  createdIdBy  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  updatedBy    String?
  title        String
  startDate    DateTime
  endDate      DateTime
  format       Format     @relation("EventFormat", fields: [formatId], references: [id])
  formatId     String
  description  String?
  image        String
  categories   Category[] @relation("EventCategories")
  participants User[]     @relation("EventParticipants")
  authors      User[]     @relation("EditableEvents")
}

model User {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  firstName           String
  lastName            String
  patronymic          String?
  email               String   @unique
  hashedPassword      String?
  role                String   @default("CLIENT")
  participatingEvents Event[]  @relation("EventParticipants")
  editableEvents      Event[]  @relation("EditableEvents")
  createdEvents       Event[]  @relation("CreatedEvents")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
